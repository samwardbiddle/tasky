# This workflow performs security scanning and publishes a Docker image to Amazon ECR
# It runs on pushes to the main branch and uses OIDC for secure AWS authentication
#
# Required setup:
# 1. AWS IAM Role with ECR permissions and GitHub OIDC trust relationship
# 2. AWS ECR repository named 'tasky'
# 3. GitHub secret: AWS_ROLE_ARN with the IAM role ARN
#
# The workflow:
# 1. Runs security scans using Gosec and Trivy
# 2. Builds a Docker image from the repository
# 3. Pushes the image to ECR with the 'latest' tag

name: Build and Publish a Docker image

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: tasky

permissions:
  id-token: write # Required for AWS OIDC authentication
  contents: read # Required to checkout repository

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Run Gosec to scan Go code for security issues
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: ./...
        continue-on-error: true

      # Run Trivy to scan for vulnerabilities in dependencies and containers
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          format: "sarif"
          output: "trivy-results.sarif"
        continue-on-error: true

  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configure AWS credentials using OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      # Add debugging steps
      - name: Debug Role ARN
        run: |
          echo "Using Role ARN (masked): ${ROLE_ARN:0:20}..."
          echo "AWS Region: $AWS_REGION"
        env:
          ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}

      - name: Verify AWS Credentials
        run: |
          aws sts get-caller-identity
          echo "AWS CLI version:"
          aws --version

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
